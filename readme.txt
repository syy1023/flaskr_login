直接把配置放在主模块里，正如我们现在要做的一样，是可行的。然
而一个更干净的解决方案就是单独创建 .ini 或者 .py 文件接着加载或者导入里面的值。




from_object() 将会寻找给定的对象(如果它是一个字符串，则会导入它)， 搜寻里面定义的全部大写的变量。在我们的这种情况中，配置文件就是我们上面写的几行代码。 你也可以将他们分别存储到多个文件
从配置文件中加载配置是一个好的主意。这是 from_envvar() 所做的， 用它替换上面的 from_object()

secret_key 是需要为了保持客户端的会话安全。明智地选择该键，使得它难以猜测，尽可能复杂。 调试标志启用或禁用交互式调试。决不让调试模式在生产系统中启动，因为它将允许用户在服务器上执行代码！

我们还添加了一个轻松地连接到指定数据库的方法，这个方法用于在请求时打开一个连接，并且在交互式 Python shell 和脚本中也能使用



closing() 助手函数允许我们在 with 块中保持数据库连接可用。 应用对象的 open_resource() 方法在其方框外也支持这个功能， 因此可以在 with 块中直接使用。这个函数从资源位置（你的 flaskr 文 件夹）中打开一个文件，并且允许你读取它。我们在这里用它在数据库连接上执行一个脚本。
当我们连接到数据库时会得到一个数据库连接对象（这里命名它为 db ），这个对象提供给我们一个数据库指针。指针上有一个可以执行完整脚本的方法。最后我们不显式地提交更改， SQLite 3 或者其它事务数据库不会这么做

现在可以在 Python shell 里创建数据库，导入并调用刚才的函数:
>>> from flaskr import init_db
>>> init_db()



所有我们的函数中需要数据库连接，因此在请求之前初始化它们，在请求结束后自动关闭他们就很有意义
Flask 允许我们使用 before_request()，after_request() 和 teardown_request() 装饰器来实现这个功能

视图函数：
现在数据库连接已经工作我们可以开始编写视图函数。我们需要四个视图函数

显示条目：
这个视图显示所有存储在数据库中的条目。它监听者应用的根地址以及将会从数据库中查询标题和内容。
id值最大的条目（最新的条目）将在最前面。从游标返回的行是按 select 语句中声明的列组织的元组。
对于像我们这样的小应用是足够的，但是你可能要把它们转换成字典。如果你对如何转换成字典感兴趣的话， 请查阅 简化查询 例子。



因为编码原因，py文件运行后会报错如：

SyntaxError: Non-ASCII character '\xe8' in file flaskr.py on line 41,

solution：
在py文件中加入，
# -*- coding: utf-8 -*
import sys
defaultencoding = 'utf-8'
if sys.getdefaultencoding() != defaultencoding:
    reload(sys)
    sys.setdefaultencoding(defaultencoding)














